@page "/clients/create/"
@inherits Blazor.Fluxor.Components.FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<FullStackSample.Client.Store.ClientCreate.ClientCreateState> State

<nav aria-label="Breadcrumb">
	<ol class="breadcrumb">
		<li class="breadcrumb-item">
			<a href="/clients/search/">Clients</a>
		</li>
		<li class="breadcrumb-item active">
			Create
		</li>
	</ol>
</nav>
@if (!string.IsNullOrEmpty(State.Value.ErrorMessage))
{
	<div class="alert alert-danger" role="alert">
		@State.Value.ErrorMessage
	</div>
}
<EditForm Model=@FormData OnValidSubmit=@Submit>
	<PeterLeslieMorris.Blazor.Validation.Validate />
	<div class="form-group">
		<label for="Name">Name</label>
		<InputText @bind-Value=FormData.Name Class="form-control" aria-describedby="Name" @attributes=GetElementDisabled() />
		<ValidationMessage For=@(() => FormData.Name) />
	</div>
	<div class="form-group">
		<label for="RegistrationNumber">Registration number</label>
		<InputNumber @bind-Value=FormData.RegistrationNumber Class="form-control" aria-describedby="Registration number" @attributes=GetElementDisabled() />
		<ValidationMessage For=@(() => FormData.RegistrationNumber) />
	</div>
	<button type="submit" class="btn btn-primary" @attributes=@GetElementDisabled()>
		@(State.Value.IsExecutingApi ? "Creating..." : "Create")
	</button>
</EditForm>

@code {
	FullStackSample.Api.Models.ClientCreateDto FormData;

	void Submit()
	{
		var command = new Api.Requests.ClientCreateCommand(FormData);
		Dispatcher.Dispatch(command);
	}

	Dictionary<string, object> GetElementDisabled()
	{
		if (State.Value.IsExecutingApi)
			return new Dictionary<string, object> { ["disabled"] = "disabled" };
		return new Dictionary<string, object>();
	}

	protected override void OnInitialized()
	{
		FormData = new Api.Models.ClientCreateDto();
	}

}